services:
  # ============================
  # üóÑÔ∏è MongoDB Database
  # ============================
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_DATABASE: userprebook
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/userprebook --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # ============================
  # üîê Auth Service
  # ============================
  authservice:
    build:
      context: .
      dockerfile: ./apps/authservice/Dockerfile
    container_name: authservice
    restart: unless-stopped
    depends_on:
      - mongo
    environment:
      MONGO_USER_DB: mongodb://mongo:27017/userprebook
      NODE_ENV: docker
      AUTHSERVICEPORT: 9000
    ports:
      - '9000:9000'
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://authservice:9000/graphql || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # ============================
  # üë§ User Service
  # ============================
  userservice:
    build:
      context: .
      dockerfile: ./apps/userservice/Dockerfile
    container_name: userservice
    restart: unless-stopped
    depends_on:
      - mongo
    environment:
      MONGO_USER_DB: mongodb://mongo:27017/userprebook
      NODE_ENV: docker
      USERSERVICEPORT: 9003
    ports:
      - '9003:9003'
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://userservice:9003/graphql || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # ============================
  # üì¶ Product Service
  # ============================
  productservice:
    build:
      context: .
      dockerfile: ./apps/foodservers/productservice/Dockerfile
    container_name: productservice
    restart: unless-stopped
    depends_on:
      - mongo
    environment:
      MONGO_FOOD_DB: mongodb://mongo:27017/foodprebook
      NODE_ENV: docker
      PRODUCTSERVICEPORT: 9002
    ports:
      - '9002:9002'
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://productservice:9002/graphql || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # ============================
  # üßæ Order Service
  # ============================
  orderservice:
    build:
      context: .
      dockerfile: ./apps/foodservers/orderservice/Dockerfile
    container_name: orderservice
    restart: unless-stopped
    depends_on:
      - mongo
    environment:
      MONGO_FOOD_DB: mongodb://mongo:27017/foodprebook
      NODE_ENV: docker
      ORDERSERVICEPORT: 9001
    ports:
      - '9001:9001'
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://orderservice:9001/graphql || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # ============================
  # üåê Gateway Service
  # ============================
  gateway:
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
    container_name: gateway
    restart: unless-stopped
    depends_on:
      - authservice
      - userservice
      - orderservice
      - productservice
    environment:
      NODE_ENV: docker
      GATEWAY_PORT: 8080
    ports:
      - '8080:8080'
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://gateway:8080/graphql || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

volumes:
  mongo-data:
    driver: local

networks:
  app-network:
    driver: bridge
