version: '3.9'

services:
  # ============================
  # üóÑÔ∏è MongoDB Database
  # ============================
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_DATABASE: userprebook
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.runCommand({ ping: 1 })' mongodb://localhost:27017/userprebook --quiet || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # ============================
  # üü¢ Redis
  # ============================
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # ============================
  # üîê Auth Service
  # ============================
  authservice:
    build:
      context: .
      dockerfile: ./apps/authservice/Dockerfile
    container_name: authservice
    restart: on-failure
    depends_on:
      - mongo
    environment:
      MONGO_USER_DB: mongodb://mongo:27017/userprebook
      NODE_ENV: docker
      AUTHSERVICEPORT: 9000
    ports:
      - '9000:9000'
    networks:
      - app-network
    healthcheck:
      disable: true

  # ============================
  # üßæ Order Service
  # ============================
  orderservice:
    build:
      context: .
      dockerfile: ./apps/foodservers/orderservice/Dockerfile
    container_name: orderservice
    restart: on-failure
    depends_on:
      - mongo
    environment:
      MONGO_FOOD_DB: mongodb://mongo:27017/foodprebook
      NODE_ENV: docker
      ORDERSERVICEPORT: 9001
    ports:
      - '9001:9001'
    networks:
      - app-network
    healthcheck:
      disable: true

  # ============================
  # üì¶ Product Service
  # ============================
  productservice:
    build:
      context: .
      dockerfile: ./apps/foodservers/productservice/Dockerfile
    container_name: productservice
    restart: on-failure
    depends_on:
      - mongo
    environment:
      MONGO_FOOD_DB: mongodb://mongo:27017/foodprebook
      NODE_ENV: docker
      PRODUCTSERVICEPORT: 9002
    ports:
      - '9002:9002'
    networks:
      - app-network
    healthcheck:
      disable: true

  # ============================
  # üè™ Restaurant Service
  # ============================
  restraurent:
    build:
      context: .
      dockerfile: ./apps/foodservers/restraurent/Dockerfile
    container_name: restraurent
    restart: on-failure
    depends_on:
      - mongo
      - redis
    environment:
      MONGO_FOOD_DB: mongodb://mongo:27017/foodprebook
      NODE_ENV: docker
      RESTRAURENTPORT: 9004
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - '9004:9004'
    networks:
      - app-network
    healthcheck:
      disable: true

  # ============================
  # üåê Gateway Service
  # ============================
  gateway:
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
    container_name: gateway
    restart: on-failure
    depends_on:
      - authservice
      - orderservice
      - productservice
      - restraurent
    environment:
      NODE_ENV: docker
      GATEWAY_PORT: 8080
    ports:
      - '8080:8080'
    networks:
      - app-network
    healthcheck:
      disable: true

volumes:
  mongo-data:
    driver: local

networks:
  app-network:
    driver: bridge
